{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "azureRegions": {
      "defaultValue": [
        "[parameters('primaryRegion')]",
        "[parameters('secondaryRegion')]"
      ],
      "type": "array",
      "metadata": {
        "description": "Target Azure regions, first item will be used for singleton resources"
      }
    },
    "primaryRegion": {
      "type": "string",
      "metadata": {
        "description": "Primary Azure region"
      }
    },
    "secondaryRegion": {
      "type": "string",
      "metadata": {
        "description": "Secondary Azure region"
      }
    },
    "virtualNetworkAddressPrefixRegion1": {
      "defaultValue": ["10.0.0.0/16"],
      "type": "array",
      "metadata": {
        "description": "Region 1 VNET address space."
      }
    },
    "virtualNetworkAddressPrefixRegion2": {
      "defaultValue": ["10.1.0.0/16"],
      "type": "array",
      "metadata": {
        "description": "Region 2 VNET address space."
      }
    },
    "indexerSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.0.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 Indexer subnet address space."
      }
    },
    "indexerSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.0.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 Indexer subnet address space."
      }
    },
    "searchSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.1.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 Search subnet address space."
      }
    },
    "searchSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.1.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 Search subnet address space."
      }
    },
    "forwarderSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.2.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 Forwarder subnet address space."
      }
    },
    "forwarderSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.2.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 Forwarder subnet address space."
      }
    },
    "managementSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.3.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 Management subnet address space."
      }
    },
    "managementSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.3.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 Management subnet address space."
      }
    },
    "bastionSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.4.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 Bastion subnet address space."
      }
    },
    "bastionSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.4.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 Bastion subnet address space."
      }
    },
    "appGSubnetAddressPrefixRegion1": {
      "defaultValue": "10.0.5.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 1 App Gateway subnet address space."
      }
    },
    "appGSubnetAddressPrefixRegion2": {
      "defaultValue": "10.1.5.0/24",
      "type": "string",
      "metadata": {
        "description": "Region 2 App Gateway subnet address space."
      }
    },
    "linuxUserName": {
      "type": "string",
      "defaultValue": "splunkadmin",
      "metadata": {
        "description": "User name for linux VMs"
      }
    },
    "linuxSSHKey": {
      "type": "string",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "numberOfIndexers": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Indexer VMs"
      }
    },
    "numberOfSearchHeads": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Search Head VMs"
      }
    },
    "indexerSku": {
      "type": "string",
      "defaultValue": "Standard_D16ds_v4",
      "metadata": {
        "description": "VM SKU for Splunk indexers"
      }
    },
    "searchHeadSku": {
      "type": "string",
      "defaultValue": "Standard_D16ds_v4",
      "metadata": {
        "description": "VM SKU for Splunk Search Heads"
      }
    },
    "cmSku": {
      "type": "string",
      "defaultValue": "Standard_D8ds_v4",
      "metadata": {
        "description": "VM SKU for cluster master"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "defaultValue": "splunk",
      "metadata": {
        "description": "DNS prefix for public IP addresses"
      }
    },
    "vmImage": {
      "type": "string",
      "defaultValue": "ubuntu1804",
      "metadata": {
        "description": "VM image variable identifier"
      }
    },
    "splunkUser": {
      "type": "string",
      "defaultValue": "splunkadmin",
      "metadata": {
        "description": "Splunk user name to use during Splunk install"
      }
    },
    "splunkPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password to use during Splunk install"
      }
    },
    "splunkPass4SymmKey": {
      "type": "securestring",
      "metadata": {
        "description": "Pass4SymmKey to use during Splunk install"
      }
    },
    "indexerPipelines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of parallel ingestion pipelines on Indexer nodes"
      }
    },
    "splunkBlobUrl": {
      "type": "string",
      "metadata": {
        "description": "URL for Splunk Enterprise .tgz file"
      }
    },
    "splunkUfBlobUrl": {
      "type": "string",
      "defaultValue": "replace-me",
      "metadata": {
        "description": "URL for Splunk UF .tgz file"
      }
    },
    "licenseFile": {
      "type": "string",
      "metadata": {
        "description": "Splunk Enterprise license file"
      }
    },
    "hotDiskSize": {
      "type": "int",
      "defaultValue": 1024,
      "metadata": {
        "description": "Disk size for Premium SSD hot volume"
      }
    },
    "coldDiskSize": {
      "type": "int",
      "defaultValue": 1024,
      "metadata": {
        "description": "Disk size for Standard HDD cold volume"
      }
    },
    "deployHeavyForwarders": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Heavy Forwarder VMs"
      }
    },
    "deploySyslogReceivers": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Syslog Receiver VMs"
      }
    },
    "deployHEC": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure HEC on Indexers"
      }
    },
    "HECPublicIp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configure Public IP for HEC"
      }
    },
    "numberOfForwarders": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Heavy Forwarder VMs"
      }
    },
    "numberOfSyslogReceivers": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Syslog Receivers VMs"
      }
    },
    "hfSku": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v4",
      "metadata": {
        "description": "SKU for Heavy Forwarder VMs"
      }
    },
    "syslogSku": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v4",
      "metadata": {
        "description": "SKU for Syslog Receiver VMs"
      }
    },
    "numberOfDeploymentServers": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Deployment Server VMs"
      }
    },
    "deploymentServerSku": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v4",
      "metadata": {
        "description": "SKU for Deployment Server VMs"
      }
    },
    "shdSku": {
      "type": "string",
      "defaultValue": "Standard_D8ds_v4",
      "metadata": {
        "description": "SKU for Search Head Deployer VMs"
      }
    },
    "hfPipelines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of parallel ingestion pipelines on HF nodes"
      }
    },
    "licenseMasterSku": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v4",
      "metadata": {
        "description": "SKU for License Master VM"
      }
    },
    "monitoringConsoleSku": {
      "type": "string",
      "defaultValue": "Standard_D16ds_v4",
      "metadata": {
        "description": "SKU for Monitoring Console VM"
      }
    },
    "deployBastion": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Bastion"
      }
    },
    "replicationFactor": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Splunk replication factor"
      }
    },
    "searchFactor": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Splunk replication factor"
      }
    },
    "numberOfFaultDomains": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of fault domains for the availability set"
      }
    },
    "numberOfUpdateDomains": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Number of update domains for the availability set"
      }
    },
    "vmPriority": {
      "type": "string",
      "defaultValue": "Regular",
      "allowedValues": ["Regular", "Spot"],
      "metadata": {
        "description": "Priority for all VMs"
      }
    },
    "splunkWebCidr": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Source CIDR for access to Splunk UI components"
      }
    },
    "splunkSSHCidr": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Source CIDR for access to Splunk UI components"
      }
    },
    "splunkHecCidr": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Source CIDR for access to Splunk HEC port"
      }
    },
    "syslogCidr": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Source CIDR for access to Splunk Syslog Receiver port"
      }
    },
    "downloadRoot": {
      "type": "string",
      "defaultValue": "https://agcisplunk.blob.core.windows.net/splunk-install-regional",
      "metadata": {
        "description": "Root directory for Splunk install scripts and config"
      }
    },
    "coldStorageTier": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": ["Standard_LRS", "StandardSSD_LRS", "Premium_LRS"],
      "metadata": {
        "description": "Storage tier for cold volume attached disk"
      }
    },
    "dnsZoneName": {
      "type": "string",
      "defaultValue": "splunk.azure",
      "metadata": {
        "description": "Name for internal private DNS zone"
      }
    },
    "clusterMasterPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Cluster Master VM"
      }
    },
    "licenseMasterPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to License Master VM"
      }
    },
    "shdPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Search Head Deployer VM"
      }
    },
    "monitoringPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Monitoring Console VM"
      }
    },
    "indexerPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Indexer VMs"
      }
    },
    "shPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Search Head VMs"
      }
    },
    "hfPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Heavy Forwarder VMs"
      }
    },
    "syslogPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Syslog VMs"
      }
    },
    "dsPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Deployment Server VMs"
      }
    },
    "dsLbPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Deployment Server Load Balancer"
      }
    },
    "syslogLbPip": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attach public IP to Syslog Receiver Load Balancer"
      }
    }
  },
  "functions": [],
  "variables": {
    "vnetNamePrefix": "splunkvnet",
    "indexerSubnetName": "indexer",
    "searchSubnetName": "search",
    "managementSubnetName": "management",
    "forwarderSubnetName": "forwarders",
    "isL": "[contains(parameters('indexerSku'), '_L')]",
    "vmType": "[if(variables('isL'), 'lv2disks', 'otherdisks')]",
    "splunkAppDiskSizeGb": 512,
    "dnsZoneName": "splunk.azure",
    "downloadRoot": "[parameters('downloadRoot')]",
    "installScriptPath": "[concat(variables('downloadRoot'), '/scripts/common/install.sh')]",
    "syslogInstallScriptPath": "[concat(variables('downloadRoot'), '/scripts/syslog/install.sh')]",
    "configPath": "[concat(variables('downloadRoot'), '/config')]",
    "splunkDownload": "[parameters('splunkBlobUrl')]",
    "splunkUfDownload": "[parameters('splunkUfBlobUrl')]",
    "resgpguid": "[substring(replace(guid(resourceGroup().id), '-', ''), 0, 4)]",
    "ubuntu1804": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "18.04-LTS",
      "version": "latest"
    },
    "centos77": {
      "publisher": "OpenLogic",
      "offer": "CentOS",
      "sku": "7.7",
      "version": "latest"
    },
    "rhel76payg": {
      "publisher": "RedHat",
      "offer": "RHEL",
      "sku": "7.6",
      "version": "latest"
    },
    "dsLbFrontEnd": "[if(parameters('dsLbPip'), variables('publicDsLbFrontend'), variables('privateDsLbFrontend'))]",
    "publicDsLbFrontend": {
      "name": "LoadBalancerFrontEnd",
      "properties": {
        "publicIPAddress": {
          "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dslb')]"
        }
      }
    },
    "privateDsLbFrontend": {
      "name": "LoadBalancerFrontEnd",
      "properties": {
        "privateIPAllocationMethod": "Dynamic",
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
        }
      }
    },
    "syslogLbFrontEnd": "[if(parameters('syslogLbPip'), variables('publicSyslogLbFrontend'), variables('privateSyslogLbFrontend'))]",
    "hecLbFrontEnd": "[if(parameters('hecPublicIp'), variables('publicHecLbFrontend'), variables('privateHecLbFrontend'))]",
    "copy": [
      {
        "name": "publicSyslogLbFrontend",
        "count": 2,
        "input": {
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('sysloglbRegion', copyIndex('publicSyslogLbFrontend', 1)))]"
            }
          }
        }
      },
      {
        "name": "privateSyslogLbFrontend",
        "count": 2,
        "input": {
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', copyIndex('privateSyslogLbFrontend', 1)), variables('forwarderSubnetName'))]"
            }
          }
        }
      },
      {
        "name": "publicHecLbFrontend",
        "count": 2,
        "input": {
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('hecRegion', copyIndex('publicHecLbFrontend', 1)))]"
            }
          }
        }
      },
      {
        "name": "privateHecLbFrontend",
        "count": 2,
        "input": {
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', copyIndex('privateHecLbFrontend', 1)), variables('indexerSubnetName'))]"
            }
          }
        }
      },
      {
        "name": "syslogOutboundLbBep",
        "count": 2,
        "input": {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-syslog-region', copyIndex('syslogOutboundLbBep', 1))), '/backendAddressPools/LoadBalancerBackEndPool1')]"
        }
      },
      {
        "name": "syslogLbBep",
        "count": 2,
        "input": {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('loadBalancer-syslog-region', copyIndex('syslogLbBep', 1))), '/backendAddressPools/LoadBalancerBackEndPool1')]"
        }
      },
      {
        "name": "hecOutboundLbBep",
        "count": 2,
        "input": {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-hec-region', copyIndex('hecOutboundLbBep', 1))), '/backendAddressPools/LoadBalancerBackEndPool1')]"
        }
      },
      {
        "name": "hecLbBep",
        "count": 2,
        "input": {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('loadBalancer-hec-region', copyIndex('hecLbBep', 1))), '/backendAddressPools/LoadBalancerBackEndPool1')]"
        }
      }
    ],
    "dsOutboundLbBep": [
      {
        "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer-outbound-ds'), '/backendAddressPools/LoadBalancerBackEndPool1')]"
      }
    ],
    "dsLbBep": [
      {
        "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds'), '/backendAddressPools/LoadBalancerBackEndPool1')]"
      }
    ],
    "dsNicBep": "[if(or(parameters('dsLbPip'), parameters('dsPip')), array(variables('dsLbBep')), union(array(variables('dsLbBep')), array(variables('dsOutboundLbBep'))))]",
    "appGWIpVar1Region1": "[first(split(parameters('appGSubnetAddressPrefixRegion1'), '/'))]",
    "appGWIpVar2Region1": "[split(variables('appGWIpVar1Region1'), '.')]",
    "appGwIpVar3Region1": "[add(int(variables('appGWIpVar2Region1')[3]), 4)]",
    "appGwIpRegion1": "[concat(variables('appGWIpVar2Region1')[0], '.', variables('appGWIpVar2Region1')[1], '.', variables('appGWIpVar2Region1')[2], '.', variables('appGwIpVar3Region1'))]",
    "appGWIpVar1Region2": "[first(split(parameters('appGSubnetAddressPrefixRegion2'), '/'))]",
    "appGWIpVar2Region2": "[split(variables('appGWIpVar1Region2'), '.')]",
    "appGwIpVar3Region2": "[add(int(variables('appGWIpVar2Region2')[3]), 4)]",
    "appGwIpRegion2": "[concat(variables('appGWIpVar2Region2')[0], '.', variables('appGWIpVar2Region2')[1], '.', variables('appGWIpVar2Region2')[2], '.', variables('appGwIpVar3Region2'))]",
    "clusterMasterPipId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'clustermaster')]"
    },
    "licensemasterPipId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'licensemaster')]"
    },
    "shdPipId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'shd')]"
    },
    "monitoringPipId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'monitoring')]"
    },
    "lv2disks": [
      {
        "caching": "None",
        "createOption": "Empty",
        "lun": 1,
        "diskSizeGB": "[parameters('coldDiskSize')]",
        "managedDisk": {
          "storageAccountType": "[parameters('coldStorageTier')]"
        }
      },
      {
        "caching": "None",
        "createOption": "Empty",
        "lun": 0,
        "diskSizeGB": "[variables('splunkAppDiskSizeGb')]",
        "managedDisk": {
          "storageAccountType": "Premium_LRS"
        }
      }
    ],
    "otherdisks": [
      {
        "caching": "None",
        "createOption": "Empty",
        "lun": 1,
        "diskSizeGB": "[parameters('coldDiskSize')]",
        "managedDisk": {
          "storageAccountType": "[parameters('coldStorageTier')]"
        }
      },
      {
        "caching": "None",
        "createOption": "Empty",
        "lun": 2,
        "diskSizeGB": "[parameters('hotDiskSize')]",
        "managedDisk": {
          "storageAccountType": "Premium_LRS"
        }
      },
      {
        "caching": "None",
        "createOption": "Empty",
        "lun": 0,
        "diskSizeGB": "[variables('splunkAppDiskSizeGb')]",
        "managedDisk": {
          "storageAccountType": "Premium_LRS"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[concat(variables('vnetNamePrefix'), 'Region', copyIndex(1))]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('azureRegions')[copyIndex()]]",
      "copy": {
        "name": "vnetcopy",
        "count": 2,
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat('splunkRegion', copyindex(1)))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat('appgRegion', copyindex(1)))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat('bastionRegion', copyindex(1)))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters(concat('virtualNetworkAddressPrefixRegion', copyIndex(1)))]"
        },
        "subnets": [
          {
            "name": "[variables('indexerSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters(concat('indexerSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('splunkRegion', copyindex(1)))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          },
          {
            "name": "[variables('searchSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters(concat('searchSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('splunkRegion', copyindex(1)))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          },
          {
            "name": "[variables('managementSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters(concat('managementSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('splunkRegion', copyindex(1)))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          },
          {
            "name": "[variables('forwarderSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters(concat('forwarderSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('splunkRegion', copyindex(1)))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "[parameters(concat('bastionSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('bastionRegion', copyindex(1)))]"
              }
            }
          },
          {
            "name": "ApplicationGatewaySubnet",
            "properties": {
              "addressPrefix": "[parameters(concat('appGSubnetAddressPrefix', 'Region', copyIndex(1)))]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('appgRegion', copyindex(1)))]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-05-01",
          "type": "virtualNetworkPeerings",
          "name": "[concat('Region', copyIndex(1), 'toRemote')]",
          "location": "[parameters('azureRegions')[copyIndex()]]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region2'))]"
          ],
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": false,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', if(equals(copyIndex(), 1), '1', '2')))]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[concat('splunkRegion', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyIndex()]]",
      "copy": {
        "name": "nsgcopy",
        "count": 2,
        "mode": "Parallel"
      },
      "properties": {
        "securityRules": [
          {
            "name": "Port_8000",
            "properties": {
              "description": "Access to Splunk admin console",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "[parameters('splunkWebCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_8089",
            "properties": {
              "description": "Access to Splunk management port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8089",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 125,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_8088",
            "properties": {
              "description": "Access to HEC",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8088",
              "sourceAddressPrefix": "[parameters('splunkHecCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 126,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_9997",
            "properties": {
              "description": "Splunk receiver",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9997",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_514",
            "properties": {
              "description": "Splunk syslog",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "514",
              "sourceAddressPrefix": "[parameters('syslogCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 160,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_22",
            "properties": {
              "description": "SSH access to VMs",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('splunkSSHCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[concat('bastionRegion', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyIndex()]]",
      "copy": {
        "name": "nsgcopy",
        "count": 2,
        "mode": "Parallel"
      },
      "properties": {
        "securityRules": [
          {
            "name": "bastion-https-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "Internet",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-gatewaymanager-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "GatewayManager",
              "destinationPortRanges": ["443", "4443"],
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-in-deny",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 900,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-vnet-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": ["22", "3389"],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-host-communication-in-allow",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": ["8080", "5701"],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-loadbalancer-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-vnet-vnet-out-allow",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRanges": ["8080", "5701"],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 110,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-azure-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": ["443", "80"],
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-internet-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "80",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[concat('appgRegion', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyIndex()]]",
      "copy": {
        "name": "nsgcopy",
        "count": 2,
        "mode": "Parallel"
      },
      "properties": {
        "securityRules": [
          {
            "name": "Port_8000_2",
            "properties": {
              "description": "Access to Splunk",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000-8002",
              "sourceAddressPrefix": "[parameters('splunkWebCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_80",
            "properties": {
              "description": "Access to Splunk via port 80",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "[parameters('splunkWebCidr')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 125,
              "direction": "Inbound"
            }
          },
          {
            "name": "appGwAdmin",
            "properties": {
              "description": "AppGw required ports",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "65200-65535",
              "sourceAddressPrefix": "GatewayManager",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 126,
              "direction": "Inbound"
            }
          },
          {
            "name": "appGwAdmin2",
            "properties": {
              "description": "AppGw required ports",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 127,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('dnsZoneName')]",
      "dependsOn": [],
      "location": "global",
      "properties": {},
      "resources": [
        {
          "name": "region1-vnet-link",
          "type": "virtualNetworkLinks",
          "apiVersion": "2018-09-01",
          "location": "global",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneName'))]"
          ],
          "properties": {
            "virtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]"
            },
            "registrationEnabled": true
          }
        },
        {
          "name": "region2-vnet-link",
          "type": "virtualNetworkLinks",
          "apiVersion": "2018-09-01",
          "location": "global",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region2'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneName'))]"
          ],
          "properties": {
            "virtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region2'))]"
            },
            "registrationEnabled": true
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('clusterMasterPip')]",
      "apiVersion": "2020-05-01",
      "name": "clustermaster",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "clustermaster"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-clustermaster-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('licenseMasterPip')]",
      "apiVersion": "2020-05-01",
      "name": "licensemaster",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "licensemaster"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-licensemaster-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('indexerPip')]",
      "apiVersion": "2020-05-01",
      "name": "[concat('indexer', copyindex())]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "indexerpipcopy",
        "count": "[parameters('numberOfIndexers')]"
      },
      "tags": {
        "displayName": "[concat('indexer', copyindex())]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-indexer', copyindex(), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('shPip')]",
      "apiVersion": "2020-05-01",
      "name": "[concat('sh', copyindex())]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "shpipcopy",
        "count": "[parameters('numberOfSearchHeads')]"
      },
      "tags": {
        "displayName": "[concat('sh', copyindex())]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-sh', copyindex(), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('hf', copyindex())]",
      "condition": "[and(parameters('deployHeavyForwarders'), parameters('hfPip'))]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "forwarderpipcopy",
        "count": "[parameters('numberOfForwarders')]"
      },
      "tags": {
        "displayName": "[concat('hf', copyindex())]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-hf', copyindex(), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('syslog', copyindex())]",
      "condition": "[and(parameters('deploySyslogReceivers'), parameters('syslogPip'))]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "syslogpipcopy",
        "count": "[parameters('numberOfSyslogReceivers')]"
      },
      "tags": {
        "displayName": "[concat('syslog', copyindex())]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-syslog', copyindex(), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "condition": "[parameters('dsPip')]",
      "name": "[concat('ds', copyindex())]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "dspipcopy",
        "count": "[parameters('numberOfDeploymentServers')]"
      },
      "tags": {
        "displayName": "[concat('ds', copyindex())]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-ds', copyindex(), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('shdPip')]",
      "apiVersion": "2020-05-01",
      "name": "shd",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "shd"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-shd-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('monitoringPip')]",
      "apiVersion": "2020-05-01",
      "name": "monitoring",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "monitoring"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-monitoring-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('appgRegion', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "appgpipcopy"
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "appg"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('hecRegion', copyIndex(1))]",
      "condition": "[parameters('HECPublicIp')]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "hecpipcopy"
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "hec"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-hec-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('hecOutboundLbRegion', copyIndex(1))]",
      "condition": "[and(parameters('deployHEC'), not(or(parameters('HECPublicIp'), parameters('indexerPip'))))]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "hecoutboundpipcopy"
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "hecoutboundlb"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-hec-outbound-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('dsLbPip')]",
      "apiVersion": "2020-05-01",
      "name": "dslb",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "dslb"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-ds-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "dsOutboundlb",
      "condition": "[not(parameters('dsLbPip'))]",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "dsoutboundlb"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-ds-outbound-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[concat('syslogOutboundlbRegion', copyIndex(1))]",
      "condition": "[and(parameters('deploySyslogReceivers'), not(or(parameters('syslogLbPip'), parameters('syslogPip'))))]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "syslogoutboundlbpipcopy"
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "[concat('syslogOutboundlbRegion', copyIndex(1))]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-syslog-outbound-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('syslogLbPip')]",
      "apiVersion": "2020-05-01",
      "name": "[concat('sysloglbRegion', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "sysloglbpipcopy"
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "[concat('sysloglbRegion', copyIndex(1))]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-syslog-', variables('resgpguid'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[parameters('deployBastion')]",
      "apiVersion": "2020-05-01",
      "name": "bastion",
      "location": "[parameters('azureRegions')[0]]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "bastion"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-bastion-', variables('resgpguid'))]"
        }
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "loadBalancer-ds",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": ["[variables('dsLbFrontEnd')]"],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'loadBalancer-ds'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'loadBalancer-ds'),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp",
              "frontendPort": 8089,
              "backendPort": 8089,
              "enableFloatingIP": false,
              "loadDistribution": "SourceIP",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'loadBalancer-ds'),'/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 8089,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "loadBalancer-outbound-ds",
      "condition": "[not(parameters('dsLbPip'))]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerOutboundFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dsOutboundlb')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "outboundRules": [
          {
            "name": "OutboundRule1",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'loadBalancer-outbound-ds'),'/frontendIPConfigurations/LoadBalancerOutboundFrontEnd')]"
                }
              ],
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'loadBalancer-outbound-ds'),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "[concat('loadBalancer-syslog-region', copyIndex(1))]",
      "condition": "[parameters('deploySyslogReceivers')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "sysloglbcopy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          "[variables('syslogLbFrontEnd')[copyIndex()]]"
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-syslog-region', copyIndex(1))),'/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-syslog-region', copyIndex(1))),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp",
              "frontendPort": 514,
              "backendPort": 514,
              "enableFloatingIP": false,
              "loadDistribution": "SourceIP",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-syslog-region', copyIndex(1))),'/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 514,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "[concat('loadBalancer-outbound-syslog-region', copyIndex(1))]",
      "condition": "[and(parameters('deploySyslogReceivers'), not(or(parameters('syslogLbPip'), parameters('syslogPip'))))]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "sysloglbcopy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerOutboundFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('syslogOutboundlbRegion', copyIndex(1)))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "outboundRules": [
          {
            "name": "OutboundRule1",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-syslog-region', copyIndex(1))),'/frontendIPConfigurations/LoadBalancerOutboundFrontEnd')]"
                }
              ],
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-syslog-region', copyIndex(1))),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "[concat('loadBalancer-hec-region', copyIndex(1))]",
      "type": "Microsoft.Network/loadBalancers",
      "condition": "[parameters('deployHEC')]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "heclbcopy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          "[variables('hecLbFrontEnd')[copyIndex()]]"
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-hec-region', copyIndex(1))),'/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-hec-region', copyIndex(1))),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp",
              "frontendPort": 8088,
              "backendPort": 8088,
              "enableFloatingIP": false,
              "loadDistribution": "SourceIP",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-hec-region', copyIndex(1))),'/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Https",
              "port": 8088,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "requestPath": "/services/collector/health/1.0"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-05-01",
      "name": "[concat('loadBalancer-outbound-hec-region', copyIndex(1))]",
      "condition": "[and(parameters('deployHEC'), not(or(parameters('HECPublicIp'), parameters('indexerPip'))))]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "hecoutboundlbcopy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerOutboundFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('hecOutboundlbRegion', copyIndex(1)))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackEndPool1"
          }
        ],
        "outboundRules": [
          {
            "name": "OutboundRule1",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-hec-region', copyIndex(1))),'/frontendIPConfigurations/LoadBalancerOutboundFrontEnd')]"
                }
              ],
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat('loadBalancer-outbound-hec-region', copyIndex(1))),'/backendAddressPools/LoadBalancerBackEndPool1')]"
              },
              "protocol": "tcp"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-05-01",
      "name": "[concat('splunk-appg-region', copyIndex(1))]",
      "location": "[parameters('azureRegions')[copyindex()]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat('appgRegion', copyIndex(1)))]",
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)))]"
      ],
      "copy": {
        "count": 2,
        "mode": "Parallel",
        "name": "appgcopy"
      },
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2"
        },
        "autoscaleConfiguration": {
          "minCapacity": 3,
          "maxCapacity": 10
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)), 'ApplicationGatewaySubnet')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('appgRegion', copyIndex(1)))]"
              }
            }
          },
          {
            "name": "appGatewayFrontendPrivateIP",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', copyIndex(1)), 'ApplicationGatewaySubnet')]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables(concat('appGwIpRegion', copyindex(1)))]"
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort",
            "properties": {
              "Port": 80
            }
          },
          {
            "name": "appGatewayFrontendMonitoringConsolePort",
            "properties": {
              "Port": 8000
            }
          },
          {
            "name": "appGatewayFrontendClusterMasterPort",
            "properties": {
              "Port": 8001
            }
          },
          {
            "name": "appGatewayFrontendDeploymentServerPort",
            "properties": {
              "Port": 8002
            }
          },
          {
            "name": "appGatewayPrivateFrontendPort",
            "properties": {
              "Port": 8080
            }
          },
          {
            "name": "appGatewayPrivateFrontendMonitoringConsolePort",
            "properties": {
              "Port": 8003
            }
          },
          {
            "name": "appGatewayPrivateFrontendClusterMasterPort",
            "properties": {
              "Port": 8004
            }
          },
          {
            "name": "appGatewayPrivateFrontendDeploymentServerPort",
            "properties": {
              "Port": 8005
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "searchHeadBackendPool",
            "properties": {}
          },
          {
            "name": "monitoringConsoleBackendPool",
            "properties": {}
          },
          {
            "name": "clusterMasterBackendPool",
            "properties": {}
          },
          {
            "name": "deploymentServerBackendPool",
            "properties": {}
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": 8000,
              "Protocol": "Http",
              "CookieBasedAffinity": "Enabled"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "searchHeadHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "searchHeadHttpPrivateListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayPrivateFrontendPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "monitoringConsoleHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendMonitoringConsolePort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "monitoringConsoleHttpPrivateListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayPrivateFrontendMonitoringConsolePort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "clusterMasterHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendClusterMasterPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "clusterMasterHttpPrivateListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayPrivateFrontendClusterMasterPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "deploymentServerHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendDeploymentServerPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "deploymentServerHttpPrivateListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', concat('splunk-appg-region', copyIndex(1)), 'appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', concat('splunk-appg-region', copyIndex(1)), 'appGatewayPrivateFrontendDeploymentServerPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "searchHeadRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'searchHeadHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'searchHeadBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "searchHeadPrivateRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'searchHeadHttpPrivateListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'searchHeadBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "monitoringConsoleRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'monitoringConsoleHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'monitoringConsoleBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "monitoringConsolePrivateRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'monitoringConsoleHttpPrivateListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'monitoringConsoleBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "clusterMasterRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'clusterMasterHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'clusterMasterBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "clusterMasterPrivateRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'clusterMasterHttpPrivateListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'clusterMasterBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "deploymentServerRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'deploymentServerHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'deploymentServerBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          },
          {
            "Name": "deploymentServerPrivateRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', concat('splunk-appg-region', copyIndex(1)), 'deploymentServerHttpPrivateListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', concat('splunk-appg-region', copyIndex(1)), 'deploymentServerBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', concat('splunk-appg-region', copyIndex(1)), 'appGatewayBackendHttpSettings')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "searchTrafficManagerProfile",
      "type": "Microsoft.Network/trafficManagerProfiles",
      "apiVersion": "2018-04-01",
      "tags": {
      },
      "location": "global",
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Performance",
        "dnsConfig": {
          "relativeName": "[concat('splunk-search-', variables('resgpguid'))]",
          "ttl": 30
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/en-GB/account/login",
          "intervalInSeconds": 30,
          "timeoutInSeconds": 5,
          "toleratedNumberOfFailures": 3
        },
        "endpoints": [
          {
            "name": "Region1",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses', 'appgRegion1')]",
              "endpointStatus": "Enabled"
            }
          },
          {
            "name": "Region2",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses', 'appgRegion2')]",
              "endpointStatus": "Enabled"
            }
          }
        ]
      }
    },
    {
      "name": "bastion",
      "condition": "[parameters('deployBastion')]",
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2020-05-01",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'bastion')]",
        "[resourceId('Microsoft.Network/virtualNetworks', concat(variables('vnetNamePrefix'), 'Region1'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), 'AzureBastionSubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'bastion')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "clustermaster",
      "location": "[parameters('azureRegions')[0]]",
      "tags": {
        "displayName": "clustermaster"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region1'))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]",
        "[concat('Microsoft.Network/applicationGateways/','splunk-appg-region1')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'splunk-appg-region1'), '/backendAddressPools/clusterMasterBackendPool')]"
                }
              ],
              "publicIPAddress": "[if(parameters('clusterMasterPip'), variables('clusterMasterPipId'), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "licensemaster",
      "location": "[parameters('azureRegions')[0]]",
      "tags": {
        "displayName": "licensemaster"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region1'))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": "[if(parameters('licenseMasterPip'), variables('licensemasterPipId'), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "shd",
      "location": "[parameters('azureRegions')[0]]",
      "tags": {
        "displayName": "shd"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region1'))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": "[if(parameters('shdPip'), variables('shdPipId'), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "monitoring",
      "location": "[parameters('azureRegions')[0]]",
      "tags": {
        "displayName": "monitoring"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region1'))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]",
        "[concat('Microsoft.Network/applicationGateways/','splunk-appg-region1')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways','splunk-appg-region1'), '/backendAddressPools/monitoringConsoleBackendPool')]"
                }
              ],
              "publicIPAddress": "[if(parameters('monitoringPip'), variables('monitoringPipId'), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[concat('indexer', copyindex())]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "indexerniccopy",
        "count": "[parameters('numberOfIndexers')]"
      },
      "tags": {
        "displayName": "indexer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]"
      ],
      "properties": {
        "enableAcceleratedNetworking": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": "[if(parameters('indexerPip'), json(concat('{\"id\":', '\"',resourceId('Microsoft.Network/publicIPAddresses', concat('indexer', copyIndex())),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)), variables('indexerSubnetName'))]"
              },
              "loadBalancerBackendAddressPools": "[if(parameters('deployHEC'), if(or(parameters('hecPublicIp'), parameters('indexerPip')), array(variables('hecLbBep')[mod(copyIndex(0),2)]), union(array(variables('hecLbBep')[mod(copyIndex(0),2)]), array(variables('hecOutboundLbBep')[mod(copyIndex(0),2)]))), json('null'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[concat('sh', copyindex())]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "shniccopy",
        "count": "[parameters('numberOfSearchHeads')]"
      },
      "tags": {
        "displayName": "sh"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]",
        "[concat('Microsoft.Network/applicationGateways/', 'splunk-appg-region', add(mod(copyIndex(0),2),1))]"
      ],
      "properties": {
        "enableAcceleratedNetworking": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', concat('splunk-appg-region', add(mod(copyIndex(0),2),1))), '/backendAddressPools/searchHeadBackendPool')]"
                }
              ],
              "publicIPAddress": "[if(parameters('shPip'), json(concat('{\"id\":', '\"',resourceId('Microsoft.Network/publicIPAddresses', concat('sh', copyIndex())),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)), variables('searchSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[concat('hf', copyindex())]",
      "condition": "[parameters('deployHeavyForwarders')]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "forwarderniccopy",
        "count": "[parameters('numberOfForwarders')]"
      },
      "tags": {
        "displayName": "hf"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]"
      ],
      "properties": {
        "enableAcceleratedNetworking": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": "[if(parameters('hfPip'), json(concat('{\"id\":', '\"', resourceId('Microsoft.Network/publicIPAddresses', concat('hf', copyIndex())),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)), variables('forwarderSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[concat('syslog', copyindex())]",
      "condition": "[parameters('deploySyslogReceivers')]",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "syslogniccopy",
        "count": "[parameters('numberOfSyslogReceivers')]"
      },
      "tags": {
        "displayName": "syslog"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]"
      ],
      "properties": {
        "enableAcceleratedNetworking": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": "[if(or(parameters('syslogLbPip'), parameters('syslogPip')), array(variables('syslogLbBep')[mod(copyIndex(0),2)]), union(array(variables('syslogLbBep')[mod(copyIndex(0),2)]), array(variables('syslogOutboundLbBep')[mod(copyIndex(0),2)])))]",
              "publicIPAddress": "[if(parameters('syslogPip'), json(concat('{\"id\":', '\"',resourceId('Microsoft.Network/publicIPAddresses', concat('syslog', copyIndex())),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region', add(mod(copyIndex(0),2),1)), variables('forwarderSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[concat('ds', copyindex())]",
      "location": "[parameters('azureRegions')[0]]",
      "copy": {
        "name": "dsniccopy",
        "count": "[parameters('numberOfDeploymentServers')]"
      },
      "tags": {
        "displayName": "ds"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', concat(variables('vnetNamePrefix'), 'Region1'))]",
        "[concat('Microsoft.Network/privateDnsZones/', variables('dnsZoneName'))]",
        "[concat('Microsoft.Network/applicationGateways/','splunk-appg-region1')]",
        "[concat('Microsoft.Network/loadBalancers/', 'loadBalancer-ds')]"
      ],
      "properties": {
        "enableAcceleratedNetworking": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'splunk-appg-region1'), '/backendAddressPools/deploymentServerBackendPool')]"
                }
              ],
              "loadBalancerBackendAddressPools": "[variables('dsNicBep')]",
              "publicIPAddress": "[if(parameters('dsPip'), json(concat('{\"id\":', '\"',resourceId('Microsoft.Network/publicIPAddresses', concat('ds', copyIndex())),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('vnetNamePrefix'), 'Region1'), variables('managementSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat('indexerAvailabilitySetRegion', copyindex(1))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2020-06-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "indexeravailabilitysetcopy",
        "count": 2
      },
      "properties": {
        "platformUpdateDomainCount": "[parameters('numberOfUpdateDomains')]",
        "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "name": "[concat('shAvailabilitySetRegion', copyindex(1))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2020-06-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "shavailabilitysetcopy",
        "count": 2
      },
      "properties": {
        "platformUpdateDomainCount": "[parameters('numberOfUpdateDomains')]",
        "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "name": "[concat('hfAvailabilitySetRegion', copyindex(1))]",
      "condition": "[parameters('deployHeavyForwarders')]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2020-06-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "hfavailabilitysetcopy",
        "count": 2
      },
      "properties": {
        "platformUpdateDomainCount": "[parameters('numberOfUpdateDomains')]",
        "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "name": "[concat('syslogAvailabilitySetRegion', copyindex(1))]",
      "condition": "[parameters('deploySyslogReceivers')]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2020-06-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "syslogavailabilitysetcopy",
        "count": 2
      },
      "properties": {
        "platformUpdateDomainCount": "[parameters('numberOfUpdateDomains')]",
        "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "name": "clustermaster",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', 'clustermaster')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cmSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "clustermaster-OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('clustermaster-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "clustermaster",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'clustermaster')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[0]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'clustermaster')]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role cluster-master --splunk-url \"', variables('splunkDownload'), '\" --site 1 --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --dns-zone ', variables('dnsZoneName'), ' --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2020-05-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2020-05-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress), ' --replication-factor ', parameters('replicationFactor'), ' --search-factor ', parameters('searchFactor'), ' --deploy-hec ', parameters('deployHEC'), ' --pass4symmkey ', parameters('splunkPass4SymmKey'))]"
            }
          }
        }
      ]
    },
    {
      "name": "licensemaster",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', 'licensemaster')]"
      ],
      "properties": {
        "priority": "[parameters('vmPriority')]",
        "hardwareProfile": {
          "vmSize": "[parameters('licenseMasterSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "license-master-OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('license-master-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "licensemaster",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[0]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'licensemaster')]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role license-master --splunk-url \"', variables('splunkDownload'), '\" --site 1 --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --license-file \"', parameters('licenseFile'), '\" --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2020-05-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2020-05-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('indexer', copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "indexercopy",
        "count": "[parameters('numberOfIndexers')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('indexer', copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets', concat('indexerAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
      ],
      "tags": {
        "displayName": "indexer"
      },
      "properties": {
        "priority": "[parameters('vmPriority')]",
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat('indexerAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('indexerSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "[concat('indexer', copyindex(), '-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": "[variables(variables('vmType'))]"
        },
        "osProfile": {
          "computerName": "[concat('indexer', copyindex())]",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('indexer', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'indexer', copyindex())]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role indexer --splunk-url \"', variables('splunkDownload'), '\" --site ', add(mod(copyIndex(0),2),1), ' --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --indexer-pipelines ', parameters('indexerPipelines'), ' --vm-sku ', parameters('indexerSku'), ' --dns-zone ', variables('dnsZoneName'), ' --pass4symmkey ', parameters('splunkPass4SymmKey'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('sh', copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "shcopy",
        "count": "[parameters('numberOfSearchHeads')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('sh', copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets', concat('shAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
      ],
      "tags": {
        "displayName": "sh"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat('shAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
        },
        "priority": "[parameters('vmPriority')]",
        "hardwareProfile": {
          "vmSize": "[parameters('searchHeadSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "[concat('sh', copyindex(), '-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('sh', copyindex(), '-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat('sh', copyindex())]",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('sh', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'sh', copyindex())]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role search-head --splunk-url \"', variables('splunkDownload'), '\" --site ', add(mod(copyIndex(0),2),1), ' --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --dns-zone ', variables('dnsZoneName'), ' --sh-count ', parameters('numberOfSearchHeads'), ' --sh-instance ', copyindex(), ' --pass4symmkey ', parameters('splunkPass4SymmKey'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('hf', copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[parameters('deployHeavyForwarders')]",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "hfcopy",
        "count": "[parameters('numberOfForwarders')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('hf', copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets', concat('hfAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
      ],
      "tags": {
        "displayName": "hf"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat('hfAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('hfSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "[concat('hf', copyindex(), '-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('hf', copyindex(), '-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat('hf', copyindex())]",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('hf', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "condition": "[parameters('deployHeavyForwarders')]",
          "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'hf', copyindex())]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role heavy-forwarder --splunk-url \"', variables('splunkDownload'), '\" --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --hf-pipelines ', parameters('hfPipelines'), ' --indexer-count ', parameters('numberOfIndexers'), ' --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2020-05-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2020-05-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress), ' --dns-zone ', variables('dnsZoneName'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('syslog', copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "condition": "[parameters('deploySyslogReceivers')]",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "syslogcopy",
        "count": "[parameters('numberOfSyslogReceivers')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('syslog', copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets', concat('syslogAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
      ],
      "tags": {
        "displayName": "syslog"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat('syslogAvailabilitySetRegion', add(mod(copyIndex(0),2), 1)))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('syslogSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "[concat('syslog', copyindex(), '-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 512,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('syslog', copyindex(), '-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat('syslog', copyindex())]",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('syslog', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "condition": "[parameters('deploySyslogReceivers')]",
          "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'syslog', copyindex())]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('syslogInstallScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role syslog-receiver --splunk-uf-url \"', variables('splunkUfDownload'), '\" --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2020-05-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2020-05-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress), ' --dns-zone ', variables('dnsZoneName'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('ds', copyindex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
      "copy": {
        "name": "dscopy",
        "count": "[parameters('numberOfDeploymentServers')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('ds', copyindex()))]"
      ],
      "tags": {
        "displayName": "ds"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('deploymentServerSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "[concat('ds', copyindex(), '-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('ds', copyindex(), '-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat('ds', copyindex())]",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('ds', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[mod(copyIndex(0),2)]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'ds', copyindex())]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role deployment-server --splunk-url \"', variables('splunkDownload'), '\" --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --dns-zone ', variables('dnsZoneName'), ' --indexer-count ', parameters('numberOfIndexers'))]"
            }
          }
        }
      ]
    },
    {
      "name": "shd",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', 'clustermaster')]"
      ],
      "tags": {
        "displayName": "shd"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('shdSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "shd-OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('shd-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "shd",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'shd')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[0]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'shd')]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role search-head-deployer --splunk-url \"', variables('splunkDownload'), '\" --site 1 --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2018-08-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2018-08-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress), ' --indexer-count ', parameters('numberOfIndexers'), ' --sh-count ', parameters('numberOfSearchHeads'), ' --pass4symmkey ', parameters('splunkPass4SymmKey'), ' --dns-zone ', variables('dnsZoneName'))]"
            }
          }
        }
      ]
    },
    {
      "name": "monitoring",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "location": "[parameters('azureRegions')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', 'monitoring')]"
      ],
      "tags": {
        "displayName": "monitoring"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('monitoringConsoleSku')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables(parameters('vmImage')).publisher]",
            "offer": "[variables(parameters('vmImage')).offer]",
            "sku": "[variables(parameters('vmImage')).sku]",
            "version": "[variables(parameters('vmImage')).version]"
          },
          "osDisk": {
            "name": "monitoring-OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 64,
            "osType": "Linux",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "name": "[concat('monitoring-DataDisk')]",
              "caching": "ReadWrite",
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": 1023,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "monitoring",
          "adminUsername": "[parameters('linuxUserName')]",
          "linuxConfiguration": {
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('linuxUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('linuxSSHKey')]"
                }
              ]
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'monitoring')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2019-07-01",
          "type": "extensions",
          "name": "config-app",
          "location": "[parameters('azureRegions')[0]]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', 'monitoring')]",
            "[resourceId('Microsoft.Network/networkInterfaces', 'licensemaster')]",
            "[resourceId('Microsoft.Network/loadBalancers','loadBalancer-ds')]",
            "[resourceId('Microsoft.Network/networkInterfaces','shd')]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions','licensemaster','config-app')]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions','shd','config-app')]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions','sh0','config-app')]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions','ds0','config-app')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["[variables('installScriptPath')]"]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('sudo bash install.sh --role monitoring-console --splunk-url \"', variables('splunkDownload'), '\" --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'), ' --conf-url ', variables('configPath'), ' --deployment-server ', if(parameters('dsLbPip'), reference('Microsoft.Network/publicIPAddresses/dslb', '2018-08-01','Full').properties.ipAddress, reference('Microsoft.Network/loadBalancers/loadBalancer-ds', '2018-08-01', 'Full').properties.frontendIPConfigurations[0].properties.privateIPAddress), ' --dns-zone ', variables('dnsZoneName'), ' --sh-count ', parameters('numberOfSearchHeads'), ' --deploy-heavy-forwarders ', parameters('deployHeavyForwarders'), ' --heavy-forwarder-count ', parameters('numberOfForwarders'), ' --pass4symmkey ', parameters('splunkPass4SymmKey'))]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "searchUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/trafficManagerProfiles/searchTrafficManagerProfile', '2018-04-01').dnsConfig.fqdn)]"
    },
    "monitorUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/publicIPAddresses/appgRegion1', '2020-05-01').dnsSettings.fqdn, ':8000')]"
    },
    "cmUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/publicIPAddresses/appgRegion1', '2020-05-01').dnsSettings.fqdn, ':8001')]"
    },
    "deploymentServerUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/publicIPAddresses/appgRegion1', '2020-05-01').dnsSettings.fqdn, ':8002')]"
    },
    "privateSearchUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/applicationGateways/splunk-appg-region1', '2020-05-01').frontendIPConfigurations[1].properties.privateIPAddress, ':8080')]"
    },
    "privateMonitorUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/applicationGateways/splunk-appg-region1', '2020-05-01').frontendIPConfigurations[1].properties.privateIPAddress, ':8003')]"
    },
    "privateCmUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/applicationGateways/splunk-appg-region1', '2020-05-01').frontendIPConfigurations[1].properties.privateIPAddress, ':8004')]"
    },
    "privateDeploymentServerUrl": {
      "type": "string",
      "value": "[concat('http://', reference('Microsoft.Network/applicationGateways/splunk-appg-region1', '2020-05-01').frontendIPConfigurations[1].properties.privateIPAddress, ':8005')]"
    }
  }
}
